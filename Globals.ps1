#--------------------------------------------
# Declare Global Variables and Functions here
#--------------------------------------------

#Prometheus yaml file
$yaml = @'
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  - job_name: 'validator'
    static_configs:
      - targets: ['localhost:8081']
  - job_name: 'beacon node'
    static_configs:
      - targets: ['localhost:8080']
'@

#grafana yaml file
$grafanaYaml = @'
apiVersion: 1

datasources:
- name: prometheusdata
  type: prometheus
  access: direct
  orgId: 1
  url: http://localhost:9090
  isDefault: true
  version: 1
  editable: false
'@

#Used for showing / hiding cmd windows
Add-Type -TypeDefinition '
	public enum ShowStates
	{
	    Hide = 0,
	    Normal = 1,
	    Minimized = 2,
	    Maximized = 3,
	    ShowNoActivateRecentPosition = 4,
	    Show = 5,
	    MinimizeActivateNext = 6,
	    MinimizeNoActivate = 7,
	    ShowNoActivate = 8,
	    Restore = 9,
	    ShowDefault = 10,
	    ForceMinimize = 11,
	}
	'
# the C#-style signature of an API function (see also www.pinvoke.net)
$code = '[DllImport("user32.dll")] public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);'

# add signature as new type to PowerShell (for this session)
$type = Add-Type -MemberDefinition $code -Name myAPI -PassThru

$hiddenWindows = [System.Collections.ArrayList]@()

$ETH2stakingDashboard_json = ""

$ETH2stakingDashboard_yaml = @'
# # config file version
apiVersion: 1

providers:
 - name: 'default'
   orgId: 1
   folder: ''
   folderUid: ''
   type: file
   options:
     path: ..\conf\provisioning\dashboards #/var/lib/grafana/dashboards
'@

#Sample function that provides the location of the script
function Get-ScriptDirectory
{
<#
	.SYNOPSIS
		Get-ScriptDirectory returns the proper location of the script.

	.OUTPUTS
		System.String
	
	.NOTES
		Returns the correct path within a packaged executable.
#>
	[OutputType([string])]
	param ()
	if ($null -ne $hostinvocation)
	{
		Split-Path $hostinvocation.MyCommand.path
	}
	else
	{
		Split-Path $script:MyInvocation.MyCommand.Path
	}
}

#Sample variable that provides the location of the script
[string]$ScriptDirectory = Get-ScriptDirectory


